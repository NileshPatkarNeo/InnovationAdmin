@model Innovation_Admin.UI.Models.AdminUser.CreateAdminUserDto

@{
    ViewData["Title"] = "CreateAdminUser";
    Layout = "~/Views/Shared/_AdminHomePage.cshtml";
}

<h1>Create Admin User</h1>

<hr />
<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <form id="createAdminUserForm" asp-action="CreateAdminUser" novalidate>
                    <div class="form-group">
                        <label asp-for="User_Name" class="control-label">User Name<span class="text-danger">*</span></label>
                        <input asp-for="User_Name" class="form-control" id="User_Name" />
                        <span id="userNameError" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Role" class="control-label">Role<span class="text-danger">*</span></label>
                        <select asp-for="Role" class="form-control" asp-items="@ViewBag.RoleList" id="RoleId"></select>
                        <span id="roleError" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Email" class="control-label">Email<span class="text-danger">*</span></label>
                        <input asp-for="Email" class="form-control" id="Email" />
                        <span id="emailError" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Password" class="control-label">Password<span class="text-danger">*</span></label>
                        <input asp-for="Password" class="form-control" id="Password" type="password" />
                        <span id="passwordError" class="text-danger"></span>
                    </div>
                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" asp-for="Status" id="Status" /> @Html.DisplayNameFor(model => model.Status)
                        </label>
                        <span id="statusError" class="text-danger"></span>
                    </div>
                    <div class="form-group d-flex justify-content-between">
                        <button type="submit" class="btn btn-primary btn-lg flex-fill">Create</button>
                        <a asp-action="AdminUser" class="btn btn-secondary btn-lg flex-fill">Back</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Custom CSS for additional styling -->
<style>
    h1 {
        text-align: center;
        margin-bottom: 20px;
    }

    .card {
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        padding: 20px;
    }

    .card-body {
        padding: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-check {
        margin-bottom: 15px;
    }

    .btn {
        width: auto;
    }

    .form-group .btn {
        display: inline-block;
    }

        .form-group .btn + .btn {
            margin-left: 10px;
        }

    .flex-fill {
        flex: 1;
    }
</style>

@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
@* <script src="~/js/CreateAdminUser.js">
    
</script> *@
<script>
    document.addEventListener("DOMContentLoaded", function () {
    var form = document.getElementById("createAdminUserForm");

    form.addEventListener("submit", function (event) {
        var isValid = true;

        // Validate User Name
        var userName = document.getElementById("User_Name").value;
        var userNameError = document.getElementById("userNameError");
        if (userName.trim() === "") {
            userNameError.textContent = "User Name is required.";
            isValid = false;
        } else if (userName.length > 20) {
            userNameError.textContent = "User Name should be 20 characters or less.";
            isValid = false;
        } else {
            userNameError.textContent = "";
        }

        // Validate Email
        var email = document.getElementById("Email").value;
        var emailError = document.getElementById("emailError");
          var emailRegex = /^[^\s]+[^\s]+\.[^\s]+$/;
        if (email.trim() === "") {
            emailError.textContent = "Email is required.";
            isValid = false;
        } else if (!emailRegex.test(email)) {
            emailError.textContent = "Invalid email format.";
            isValid = false;
        } else if (!email.includes(".com")) {
            emailError.textContent = "Email address must contain .com";
            isValid = false;
        } else {
            emailError.textContent = "";
        }

        // Validate Password
        var password = document.getElementById("Password").value;
        var passwordError = document.getElementById("passwordError");
        if (password.trim() === "") {
            passwordError.textContent = "Password is required.";
            isValid = false;
        } else if (password.length < 6 || password.length > 40) {
            passwordError.textContent = "Password should be between 6 and 40 characters.";
            isValid = false;
        } else {
            passwordError.textContent = "";
        }

        // Validate Status
        var statusError = document.getElementById("statusError");
        // Assuming Status is a boolean and no additional validation needed
        statusError.textContent = "";

        if (!isValid) {
            event.preventDefault();
        }
    });
});

</script>
